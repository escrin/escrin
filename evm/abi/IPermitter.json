{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "IdentityId",
          "name": "identity",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "authorization",
          "type": "bytes"
        }
      ],
      "name": "acquireIdentity",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "IdentityId",
          "name": "identity",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "possessor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "authorization",
          "type": "bytes"
        }
      ],
      "name": "releaseIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upstream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "linkReferences": {},
    "object": "0x",
    "sourceMap": ""
  },
  "deployedBytecode": {
    "linkReferences": {},
    "object": "0x",
    "sourceMap": ""
  },
  "id": 1,
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "IdentityId",
              "name": "identity",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "authorization",
              "type": "bytes"
            }
          ],
          "name": "acquireIdentity",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "IdentityId",
              "name": "identity",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "possessor",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "authorization",
              "type": "bytes"
            }
          ],
          "name": "releaseIdentity",
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "upstream",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acquireIdentity(bytes32,address,uint64,bytes,bytes)": {
            "params": {
              "authorization": "Authentication data provided to the permitter to make its decision.",
              "context": "Non-authentication data provided to the permitter to make its decision.",
              "duration": "The requested lifetime of the permit, which may be different from lifetime actually granted.",
              "identity": "The identity that the requester wishes to acquire.",
              "requester": "The account to which the identity permit will be issued."
            },
            "returns": {
              "expiry": "The timestamp at which the permit expires, which may be different from the request timestamp plus the requested duration."
            }
          },
          "releaseIdentity(bytes32,address,bytes,bytes)": {
            "params": {
              "authorization": "Authentication data provided to the permitter to make its decision.",
              "context": "Non-authentication data provided to the permitter to make its decision.",
              "identity": "The identity that the requester wishes to acquire.",
              "possessor": "The account that will no longer have the permit."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "acquireIdentity(bytes32,address,uint64,bytes,bytes)": {
            "notice": "Requests that the permitter trigger the upstream identity registry to grant an identity."
          },
          "releaseIdentity(bytes32,address,bytes,bytes)": {
            "notice": "Requests that the permitter trigger the upstream identity registry to revoke an identity."
          },
          "upstream()": {
            "notice": "Returns the the upstream permitter or identity registry called upon successful identity acquisition/release."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "compilationTarget": {
        "contracts/identity/v1/IPermitter.sol": "IPermitter"
      },
      "evmVersion": "paris",
      "libraries": {},
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "optimizer": {
        "enabled": true,
        "runs": 4294967295
      },
      "remappings": [
        "@oasisprotocol/sapphire-contracts/contracts/=lib/sapphire-paratime/contracts/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sapphire-paratime/=lib/sapphire-paratime/"
      ],
      "viaIR": true
    },
    "sources": {
      "contracts/identity/v1/IIdentityRegistry.sol": {
        "keccak256": "0x14d726acf6b8c8662a133b50d7cf2752fdd3498ebe58611f6e51973b6f433045",
        "license": "MIT",
        "urls": [
          "bzz-raw://fcc91fcbe6157223121feb70c8339961594bb7be1eb6e7d323bad179df1b8691",
          "dweb:/ipfs/QmP8r5srCyyE3qVgrHYqBkQ4KyZ5TdZNAqfsEGvkdUcdjB"
        ]
      },
      "contracts/identity/v1/IPermitter.sol": {
        "keccak256": "0xb5e0e909c5fa4c244210f4daba3ce092c5eb7f735ceb1069d4ec2876b07ec84e",
        "license": "MIT",
        "urls": [
          "bzz-raw://89a8d49192638441aac4d421f474601022415cc1e40c066fb38dd9575c7e7d1c",
          "dweb:/ipfs/QmRaHd8D7EJG9npNCew2BRWwoatMNTBJYei9fvFvMPGB7n"
        ]
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "license": "MIT",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ]
      }
    },
    "version": 1
  },
  "methodIdentifiers": {
    "acquireIdentity(bytes32,address,uint64,bytes,bytes)": "8320790c",
    "releaseIdentity(bytes32,address,bytes,bytes)": "f58ac325",
    "supportsInterface(bytes4)": "01ffc9a7",
    "upstream()": "6a99a523"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"IdentityId\",\"name\":\"identity\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"authorization\",\"type\":\"bytes\"}],\"name\":\"acquireIdentity\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"IdentityId\",\"name\":\"identity\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"possessor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"authorization\",\"type\":\"bytes\"}],\"name\":\"releaseIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upstream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acquireIdentity(bytes32,address,uint64,bytes,bytes)\":{\"params\":{\"authorization\":\"Authentication data provided to the permitter to make its decision.\",\"context\":\"Non-authentication data provided to the permitter to make its decision.\",\"duration\":\"The requested lifetime of the permit, which may be different from lifetime actually granted.\",\"identity\":\"The identity that the requester wishes to acquire.\",\"requester\":\"The account to which the identity permit will be issued.\"},\"returns\":{\"expiry\":\"The timestamp at which the permit expires, which may be different from the request timestamp plus the requested duration.\"}},\"releaseIdentity(bytes32,address,bytes,bytes)\":{\"params\":{\"authorization\":\"Authentication data provided to the permitter to make its decision.\",\"context\":\"Non-authentication data provided to the permitter to make its decision.\",\"identity\":\"The identity that the requester wishes to acquire.\",\"possessor\":\"The account that will no longer have the permit.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acquireIdentity(bytes32,address,uint64,bytes,bytes)\":{\"notice\":\"Requests that the permitter trigger the upstream identity registry to grant an identity.\"},\"releaseIdentity(bytes32,address,bytes,bytes)\":{\"notice\":\"Requests that the permitter trigger the upstream identity registry to revoke an identity.\"},\"upstream()\":{\"notice\":\"Returns the the upstream permitter or identity registry called upon successful identity acquisition/release.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/identity/v1/IPermitter.sol\":\"IPermitter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[\":@oasisprotocol/sapphire-contracts/contracts/=lib/sapphire-paratime/contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sapphire-paratime/=lib/sapphire-paratime/\"],\"viaIR\":true},\"sources\":{\"contracts/identity/v1/IIdentityRegistry.sol\":{\"keccak256\":\"0x14d726acf6b8c8662a133b50d7cf2752fdd3498ebe58611f6e51973b6f433045\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fcc91fcbe6157223121feb70c8339961594bb7be1eb6e7d323bad179df1b8691\",\"dweb:/ipfs/QmP8r5srCyyE3qVgrHYqBkQ4KyZ5TdZNAqfsEGvkdUcdjB\"]},\"contracts/identity/v1/IPermitter.sol\":{\"keccak256\":\"0xb5e0e909c5fa4c244210f4daba3ce092c5eb7f735ceb1069d4ec2876b07ec84e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89a8d49192638441aac4d421f474601022415cc1e40c066fb38dd9575c7e7d1c\",\"dweb:/ipfs/QmRaHd8D7EJG9npNCew2BRWwoatMNTBJYei9fvFvMPGB7n\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e\",\"dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX\"]}},\"version\":1}"
}