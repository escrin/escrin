{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "report",
          "type": "bytes"
        }
      ],
      "name": "acceptTaskResults",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ITaskAcceptor.Quantifier",
              "name": "quantifier",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "taskIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ITaskAcceptor.TaskIdSelector",
          "name": "sel",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedIdentity",
      "outputs": [
        {
          "internalType": "contract IIdentityRegistry",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "IdentityId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AcceptedTaskIdsNotSorted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InterfaceUnsupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmisionTaskIdsNotSorted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    }
  ],
  "bytecode": {
    "linkReferences": {},
    "object": "0x",
    "sourceMap": ""
  },
  "deployedBytecode": {
    "linkReferences": {},
    "object": "0x",
    "sourceMap": ""
  },
  "id": 10,
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "name": "AcceptedTaskIdsNotSorted",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InterfaceUnsupported",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SubmisionTaskIdsNotSorted",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "Unauthorized",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "taskIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "report",
              "type": "bytes"
            }
          ],
          "name": "acceptTaskResults",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "enum ITaskAcceptor.Quantifier",
                  "name": "quantifier",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256[]",
                  "name": "taskIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct ITaskAcceptor.TaskIdSelector",
              "name": "sel",
              "type": "tuple"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getTrustedIdentity",
          "outputs": [
            {
              "internalType": "contract IIdentityRegistry",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "IdentityId",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptTaskResults(uint256[],bytes,bytes)": {
            "params": {
              "proof": "some proof of having completed the identified tasks that the acceptor can verify.",
              "report": "some data provided by the submitter that the requester may or may not trust",
              "taskIds": "a sorted set of taskIds completed in this submission"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "acceptTaskResults(uint256[],bytes,bytes)": {
            "notice": "Accepts one or more elements of a task runner's task results submission, returning the set of tasks that were accepted."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "compilationTarget": {
        "contracts/tasks/v1/acceptors/PermittedSubmitterTaskAcceptor.sol": "PermittedSubmitterTaskAcceptor"
      },
      "evmVersion": "paris",
      "libraries": {},
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "optimizer": {
        "enabled": true,
        "runs": 4294967295
      },
      "remappings": [
        "@oasisprotocol/sapphire-contracts/contracts/=lib/sapphire-paratime/contracts/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sapphire-paratime/=lib/sapphire-paratime/"
      ],
      "viaIR": true
    },
    "sources": {
      "contracts/identity/v1/IIdentityRegistry.sol": {
        "keccak256": "0x14d726acf6b8c8662a133b50d7cf2752fdd3498ebe58611f6e51973b6f433045",
        "license": "MIT",
        "urls": [
          "bzz-raw://fcc91fcbe6157223121feb70c8339961594bb7be1eb6e7d323bad179df1b8691",
          "dweb:/ipfs/QmP8r5srCyyE3qVgrHYqBkQ4KyZ5TdZNAqfsEGvkdUcdjB"
        ]
      },
      "contracts/identity/v1/IPermitter.sol": {
        "keccak256": "0xb5e0e909c5fa4c244210f4daba3ce092c5eb7f735ceb1069d4ec2876b07ec84e",
        "license": "MIT",
        "urls": [
          "bzz-raw://89a8d49192638441aac4d421f474601022415cc1e40c066fb38dd9575c7e7d1c",
          "dweb:/ipfs/QmRaHd8D7EJG9npNCew2BRWwoatMNTBJYei9fvFvMPGB7n"
        ]
      },
      "contracts/tasks/v1/ITaskAcceptor.sol": {
        "keccak256": "0xbb073d5b28001f3912de5067c1a4ee53f45704e668122c1c700f7cdddab7e635",
        "license": "MIT",
        "urls": [
          "bzz-raw://5d302b5fb2590190741c4e2552d780d947c5523d67944a3364878a5eb7680a41",
          "dweb:/ipfs/QmSiw6M5rz1iEAoZc5UokPkCFR65XTiVSYWGvvpvQAiRn8"
        ]
      },
      "contracts/tasks/v1/acceptors/PermittedSubmitterTaskAcceptor.sol": {
        "keccak256": "0xbbbfd150091c420ba7557169290fe1ea96bccd1e355be4cce309f0b3d8d54552",
        "license": "MIT",
        "urls": [
          "bzz-raw://3d44d2e52ed7b1143daf714b30313c67d9433e09f24d7c95f13dcedbac8a4622",
          "dweb:/ipfs/QmTi1JjDHD8P4qH8zzXYXzo2jTZJ7DNwZSMMReKhFZXPDJ"
        ]
      },
      "contracts/tasks/v1/acceptors/TaskAcceptor.sol": {
        "keccak256": "0x9865f3720eeb67d881085819fa7177b8446ebe3d84afde1b11f3dcbbeece8b44",
        "license": "MIT",
        "urls": [
          "bzz-raw://7f58c0af3d64e7c5704cec2f8b22a761bb8227182f20fd1fe34fe1eb59aad47b",
          "dweb:/ipfs/QmZGNqXGESNYvE9CuJ7svZmLw3XmhDsEj4F8g7DoznrrUM"
        ]
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "license": "MIT",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ]
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol": {
        "keccak256": "0xa2a74d4098651d8729e7a83556077e0597d1ee6e2f03b7c94fe87cb5a3a9ee54",
        "license": "MIT",
        "urls": [
          "bzz-raw://e389d1cd8e06a8885ca04033dc8008a4268b59aa6841db75349fb736ff227f2f",
          "dweb:/ipfs/QmfFp3Lmvv2d5qGhgTMW5v5msj6dq9rdcK4Yst4GrjFZ9b"
        ]
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "license": "MIT",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ]
      }
    },
    "version": 1
  },
  "methodIdentifiers": {
    "acceptTaskResults(uint256[],bytes,bytes)": "9c45b66e",
    "getTrustedIdentity()": "e61b935f",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AcceptedTaskIdsNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterfaceUnsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmisionTaskIdsNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"}],\"name\":\"acceptTaskResults\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ITaskAcceptor.Quantifier\",\"name\":\"quantifier\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITaskAcceptor.TaskIdSelector\",\"name\":\"sel\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedIdentity\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistry\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"IdentityId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptTaskResults(uint256[],bytes,bytes)\":{\"params\":{\"proof\":\"some proof of having completed the identified tasks that the acceptor can verify.\",\"report\":\"some data provided by the submitter that the requester may or may not trust\",\"taskIds\":\"a sorted set of taskIds completed in this submission\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AcceptedTaskIdsNotSorted()\":[{\"notice\":\"The set of accepted task ids was not sorted.\"}],\"InterfaceUnsupported()\":[{\"notice\":\"The provided contract address does not support the correct interface.\"}],\"SubmisionTaskIdsNotSorted()\":[{\"notice\":\"The input task ids were not sorted.\"}],\"Unauthorized()\":[{\"notice\":\"The caller is not authorized to make the request.\"}]},\"kind\":\"user\",\"methods\":{\"acceptTaskResults(uint256[],bytes,bytes)\":{\"notice\":\"Accepts one or more elements of a task runner's task results submission, returning the set of tasks that were accepted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tasks/v1/acceptors/PermittedSubmitterTaskAcceptor.sol\":\"PermittedSubmitterTaskAcceptor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[\":@oasisprotocol/sapphire-contracts/contracts/=lib/sapphire-paratime/contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sapphire-paratime/=lib/sapphire-paratime/\"],\"viaIR\":true},\"sources\":{\"contracts/identity/v1/IIdentityRegistry.sol\":{\"keccak256\":\"0x14d726acf6b8c8662a133b50d7cf2752fdd3498ebe58611f6e51973b6f433045\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fcc91fcbe6157223121feb70c8339961594bb7be1eb6e7d323bad179df1b8691\",\"dweb:/ipfs/QmP8r5srCyyE3qVgrHYqBkQ4KyZ5TdZNAqfsEGvkdUcdjB\"]},\"contracts/identity/v1/IPermitter.sol\":{\"keccak256\":\"0xb5e0e909c5fa4c244210f4daba3ce092c5eb7f735ceb1069d4ec2876b07ec84e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89a8d49192638441aac4d421f474601022415cc1e40c066fb38dd9575c7e7d1c\",\"dweb:/ipfs/QmRaHd8D7EJG9npNCew2BRWwoatMNTBJYei9fvFvMPGB7n\"]},\"contracts/tasks/v1/ITaskAcceptor.sol\":{\"keccak256\":\"0xbb073d5b28001f3912de5067c1a4ee53f45704e668122c1c700f7cdddab7e635\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5d302b5fb2590190741c4e2552d780d947c5523d67944a3364878a5eb7680a41\",\"dweb:/ipfs/QmSiw6M5rz1iEAoZc5UokPkCFR65XTiVSYWGvvpvQAiRn8\"]},\"contracts/tasks/v1/acceptors/PermittedSubmitterTaskAcceptor.sol\":{\"keccak256\":\"0xbbbfd150091c420ba7557169290fe1ea96bccd1e355be4cce309f0b3d8d54552\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d44d2e52ed7b1143daf714b30313c67d9433e09f24d7c95f13dcedbac8a4622\",\"dweb:/ipfs/QmTi1JjDHD8P4qH8zzXYXzo2jTZJ7DNwZSMMReKhFZXPDJ\"]},\"contracts/tasks/v1/acceptors/TaskAcceptor.sol\":{\"keccak256\":\"0x9865f3720eeb67d881085819fa7177b8446ebe3d84afde1b11f3dcbbeece8b44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7f58c0af3d64e7c5704cec2f8b22a761bb8227182f20fd1fe34fe1eb59aad47b\",\"dweb:/ipfs/QmZGNqXGESNYvE9CuJ7svZmLw3XmhDsEj4F8g7DoznrrUM\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9\",\"dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\":{\"keccak256\":\"0xa2a74d4098651d8729e7a83556077e0597d1ee6e2f03b7c94fe87cb5a3a9ee54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e389d1cd8e06a8885ca04033dc8008a4268b59aa6841db75349fb736ff227f2f\",\"dweb:/ipfs/QmfFp3Lmvv2d5qGhgTMW5v5msj6dq9rdcK4Yst4GrjFZ9b\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e\",\"dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX\"]}},\"version\":1}"
}