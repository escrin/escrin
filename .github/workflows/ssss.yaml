name: SSSS

on:
  push:
    branches:
      - main
    paths:
      - 'ssss/**'
      - '.github/workflows/ssss.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'ssss/**'
      - '.github/workflows/ssss.yaml'
  create:
    tags:
      - 'ssss/v*.*.*'

concurrency:
  group: workflow-ssss-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SSSS_IMAGE: ghcr.io/escrin/ssss

jobs:
  lint:
    defaults:
      run:
        working-directory: ./ssss
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint deployment scripts
        run: |
          go install mvdan.cc/sh/v3/cmd/shfmt@latest
          shellcheck deploy/**/*.sh
          $(go env GOPATH)/bin/shfmt -s -d deploy/**/*.sh
          terraform fmt -recursive -check -diff

      - name: Install Rust
        run: |
          rustup default nightly
          rustup component add rustfmt clippy

      - name: Run rustfmt
        run: cargo fmt --check

      - name: Run cargo clippy
        run: cargo clippy --all --profile test -- -D clippy::dbg_macro

  test:
    defaults:
      run:
        working-directory: ./ssss
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run cargo test
        run: cargo test --all -- --skip backend::aws --skip backend::azure

  build:
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: ubuntu-latest
            name: linux-amd64
            system: x86_64-linux
          - runner: macos-13
            name: darwin
            system: x86_64-darwin
          # - runner: macos-14
          #   name: darwin-arm64
          #   system: aarch64-darwin
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.runner }}
    needs:
      - lint
      - test
    permissions:
      id-token: "write"
      contents: "read"
    defaults:
      run:
        working-directory: ./ssss
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: DeterminateSystems/flake-checker-action@main
      - name: Run `nix build`
        run: nix build . --system ${{ matrix.platform.system }}
      - uses: actions/upload-artifact@v4
        with:
          name: ssss-${{ matrix.platform.name }}
          path: ssss/result/bin/*
          if-no-files-found: error

  package:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        platform:
          - tag: linux/amd64
          - tag: linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform.tag }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SSSS_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: '{{defaultContext}}:ssss'
          platforms: ${{ matrix.platform.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=image,name=${{ env.SSSS_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=registry,ref=${{ env.SSSS_IMAGE }}
          cache-to: type=inline

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - package
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SSSS_IMAGE }}
          tags: |
            type=match,pattern=ssss/v(.*),group=1

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.SSSS_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.SSSS_IMAGE }}:${{ steps.meta.outputs.version }}
